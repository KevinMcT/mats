import java.nio.charset.StandardCharsets
import java.time.LocalDateTime

node {
    // Version of node to use.
    version = '12.14.0'

    // Version of Yarn to use.
    yarnVersion = '1.21.1'

    // Download node rather than using global
    download = true

    nodeModulesDir = file("${projectDir}/client/javascript")
}

task yarnInstall(type: YarnTask) {
    execOverrides {
        it.workingDir = "${projectDir}/client/javascript"
    }
}

// Task to start a MatsTestWebsocketServer for integration tests. We will monitor the log until we get the expected number
// of ws urls, that other tasks can then depend on
task startMatsTestWebsocketServer(dependsOn: [configurations.testRuntimeClasspath]) {
    ext {
        wsUrls = []
    }

    doLast {
        logger.info("Starting MatsTestWebsocketServer");
        List<String> cmd = [
                "${System.getenv("JAVA_HOME")}/bin/java",
                "-classpath", sourceSets.test.runtimeClasspath.asPath,
                "com.stolsvik.mats.websocket.MatsTestWebsocketServer",
                "3"
        ]
        Process server = cmd.execute()

        // Keep a log file of the server output
        File log = new File("$buildDir/logs/matsSocketServer-${LocalDateTime.now().withNano(0)}.log")
        log.parentFile.mkdirs();

        BufferedReader reader = new BufferedReader(new InputStreamReader(server.inputStream, StandardCharsets.UTF_8));
        log.withWriterAppend { out ->
            String line;
            while (wsUrls.size < 3 && (line = reader.readLine()) != null) {
                out.writeLine(line)
                int urlStart = line.indexOf("WS_URL: ")
                int urlEnd = line.indexOf("json")
                if (urlStart > -1 && urlEnd > urlStart) {
                    String url = line.substring(urlStart + 8, urlEnd + 4)
                    wsUrls.add(url)
                    logger.info("Registering WS URL: $url");
                }
            }
        }
        if (wsUrls.isEmpty()) {
            server.errorStream.eachLine { logger.error(it) }
            logger.error("Failed to execute: [${cmd.join(" ")}]")
            throw new GradleScriptException("Failed to start MatstestWebsocketServer")
        }
        logger.info("MatsTestWebsocketServer started");

        // Fork a new thread to just keep reading and logging the MatsTestWebsocketServer
        new Thread({
            log.withWriterAppend { out ->
                reader.eachLine { line ->
                    out.writeLine(line)
                }
            }
        }, "MatsTestWebsocketServer-logprinter").start()
    }
}

// Stop the MatsTestWebsocketServer, this is done by inspecting the wsUrls field on the start task,
// and creating a url to the shutdown page based on the first websocket url. The shutdown page is
// a servlet that will do System.exit(0) to shutdown the server.
task stopMatsTestWebsocketServer(dependsOn: startMatsTestWebsocketServer) {
    doLast {
        String shutdownUrl = startMatsTestWebsocketServer.wsUrls[0]
                .replace("ws://", "http://")
                .replace("/matssocket/json", "/shutdown");
        logger.info("Shutting down MatsTestWebsocketServer")
        logger.info("Response: ${new URL(shutdownUrl).text}")
    }
}

// Execute the integration tests against a test MatsTestWebsocketServer
task mochaIntegrationTest(type: YarnTask, dependsOn: [yarnInstall, startMatsTestWebsocketServer]) {
    args = ['integrationTest']

    doFirst {
        execOverrides {
            it.workingDir = "${projectDir}/client/javascript"
            it.environment("MATS_SOCKET_URLS", startMatsTestWebsocketServer.wsUrls.join(","))
        }
    }
}
// Make sure that the startMatsTestWebsocketServer is finalized and shut down, while also making sure that
// we do not shut down until mochaIntegrationTest has completed first.
startMatsTestWebsocketServer.finalizedBy(stopMatsTestWebsocketServer)
stopMatsTestWebsocketServer.mustRunAfter(mochaIntegrationTest)

// :: Helper methods for people too lazy to figure out node and run these from the javascript client folder.

// Run the integration test continously, retriggering on change in the javascript code. This assumes there is
// a server listening on ws://localhost:8080/matssocket/json
task mochaIntegrationTestWatch(type: YarnTask, dependsOn: [yarnInstall]) {
    args = ['integrationTest', '--watch']

    execOverrides {
        it.workingDir = "${projectDir}/client/javascript"
    }
}

check.dependsOn(mochaIntegrationTest)

// Start a server to host sample html files along with the MatsSocket.js library
task serveHtml(type: YarnTask, dependsOn: [yarnInstall]) {
    args = ['run', 'serve']

    execOverrides {
        it.workingDir = "${projectDir}/client/javascript"
    }
}