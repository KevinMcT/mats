import java.nio.charset.StandardCharsets
import java.time.LocalDateTime

// mats-websockets
plugins {
    id "com.github.node-gradle.node" version "2.1.1"
}

dependencies {
    // Uses the mats-lib project
    compile project(":mats-lib")

    // Relies on the WebSocket API
    compileOnly 'javax.websocket:javax.websocket-api:1.0'

    // Jackson JSON library, which is the serialization mechanism in use for MatsSockets comms
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"

    // Flyway, for DB preparation and migration for 'ClusterStoreAndForward_SQL'.
    compile 'org.flywaydb:flyway-core:6.1.0'

    // :: TEST

    // Testing tools for Mats
    testCompile project(":mats-test")

    // Base Jetty Server
    testCompile 'org.eclipse.jetty:jetty-server:9.+'
    // .. Jetty Servlets
    testCompile 'org.eclipse.jetty:jetty-webapp:9.+'
    // .. Jetty: To get the @WebListener etc. annotation scanning.
    testCompile 'org.eclipse.jetty:jetty-annotations:9.+'
    // .. Jetty: JSR-356 javax.websocket implementation for Jetty
    testCompile 'org.eclipse.jetty.websocket:javax-websocket-server-impl:9.+'

    // H2 Database
    testCompile 'com.h2database:h2:1.4.200'

    // Logging
    testCompile "org.slf4j:log4j-over-slf4j:1.7.+"
    testCompile "ch.qos.logback:logback-classic:1.2.+"
}

// Task to start a MatsTestWebsocketServer for integration tests. We will monitor the log until we get the expected number
// of ws urls, that other tasks can then depend on
task startMatsTestWebsocketServer(dependsOn: [configurations.testRuntimeClasspath, compileTestJava]) {
    ext {
        wsUrls = []
    }

    doLast {
        String serverClassname = "com.stolsvik.mats.websocket.MatsTestWebsocketServer";
        logger.info("Starting MatsTestWebsocketServer");
        List<String> cmd = [
                "${System.getenv("JAVA_HOME")}/bin/java",
                "-classpath", sourceSets.test.runtimeClasspath.asPath,
                serverClassname,
                "3"
        ]
        Process server = cmd.execute()

        // Keep a log file of the server output
        File log = new File("$buildDir/logs/matsSocketServer-${LocalDateTime.now().withNano(0)}.log")
        log.parentFile.mkdirs();

        BufferedReader reader = new BufferedReader(new InputStreamReader(server.inputStream, StandardCharsets.UTF_8));
        log.withWriterAppend { out ->
            String line;
            while (wsUrls.size < 3 && (line = reader.readLine()) != null) {
                out.writeLine(line)
                int urlStart = line.indexOf("WS_URL: ")
                int urlEnd = line.indexOf("json")
                if (urlStart > -1 && urlEnd > urlStart) {
                    String url = line.substring(urlStart + 8, urlEnd + 4)
                    wsUrls.add(url)
                    logger.info("Registering WS URL: $url");
                }
            }
        }
        if (wsUrls.isEmpty()) {
            server.errorStream.eachLine { logger.error(it) }
            logger.error("Failed to execute: [${cmd.join(" ")}]")
            throw new GradleException("Failed to start $serverClassname, check log above for command.");
        }
        logger.info("$serverClassname started");

        // Fork a new thread to just keep reading and logging the MatsTestWebsocketServer
        new Thread({
            log.withWriterAppend { out ->
                reader.eachLine { line ->
                    out.writeLine(line)
                }
            }
        }, "MatsTestWebsocketServer-logprinter").start()
    }
}

// Stop the MatsTestWebsocketServer, this is done by inspecting the wsUrls field on the start task,
// and creating a url to the shutdown page based on the first websocket url. The shutdown page is
// a servlet that will do System.exit(0) to shutdown the server.
task stopMatsTestWebsocketServer(dependsOn: startMatsTestWebsocketServer) {
    doLast {
        String shutdownUrl = startMatsTestWebsocketServer.wsUrls[0]
                .replace("ws://", "http://")
                .replace("/matssocket/json", "/shutdown");
        logger.info("Shutting down MatsTestWebsocketServer by invoking '$shutdownUrl")
        String response = new URL(shutdownUrl).text;
        logger.info("Response: '${response}'")
    }
}

// Make sure that the startMatsTestWebsocketServer is finalized and shut down.
startMatsTestWebsocketServer.finalizedBy(stopMatsTestWebsocketServer)

apply from: 'javascript.gradle'
apply from: 'dart.gradle'